// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// run migrations để tạo lại các bảng 
// npx prisma migrate dev --name <migration-name>

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  Id Int @id @default(autoincrement())
  Name String
  Position String
  CompanyId Int @unique
  Address String?
  Email String @unique
  Password String
  CreateAt DateTime @default(now())
  UpdateAt DateTime @updatedAt
  hashedRT String?

  whCompany Warehouses[] @relation("userCompany")
  whStaff Warehouses[] @relation("usersStaff")
  suppliers Suppliers[]
  products Products[]
  categories Categories[]
  classifies Classifies[]

  @@map("users")
}


model Warehouses {
  Id Int @id @default(autoincrement())
  Name String
  Code String @unique
  Address String?
  StaffName String
  StaffId Int
  TimeCreate DateTime @default(now())
  CompanyId Int

  categories Categories[]
  classifies Classifies[] 
  products Products[]

  userCompany Users @relation("userCompany", fields: [CompanyId], references: [CompanyId])
  usersStaff Users @relation("usersStaff", fields: [StaffId], references: [Id])

  @@map("warehouses")
}

model Suppliers {
  Id Int @id @default(autoincrement())
  Code String @unique
  Name String
  Origin String
  CreateAt DateTime @default(now())
  CompanyId Int
  IsCollab Boolean

  categories Categories[]
  classifies Classifies[]
  products Products[]

  companyId Users @relation(fields: [CompanyId], references: [CompanyId])

  @@map("Suppliers")
}

model Categories {
  Id Int @id @default(autoincrement())
  Code String @unique
  Name String
  CreateAt DateTime @default(now())
  WarehouseId Int
  SupplierId Int
  CompanyId Int
  IsRestock Boolean

  classifies Classifies[]
  products Products[]

  warehouses Warehouses @relation(fields: [WarehouseId], references: [Id])
  suppliers Suppliers @relation(fields: [SupplierId], references: [Id])
  companyId Users @relation(fields: [CompanyId], references: [CompanyId])

  @@map("categories")
}

model Classifies {
  Id Int @id @default(autoincrement())
  Code String @unique
  Name String
  CreateAt DateTime @default(now())
  CategoryId Int
  WarehouseId Int
  SupplierId Int
  CompanyId Int
  IsRestock Boolean

  product Products[]

  warehouse Warehouses @relation(fields: [WarehouseId], references: [Id])
  categories Categories @relation(fields: [CategoryId], references: [Id])
  suppliers Suppliers @relation(fields: [SupplierId], references: [Id])
  companyId Users @relation(fields: [CompanyId], references: [CompanyId])

  @@map("classifies")  
}

model Products {
  Id Int @id @default(autoincrement())
  Code String @unique
  Name String
  CreateAt DateTime @default(now())
  CategoryId Int
  WarehouseId Int
  ClassifyId Int
  SupplierId Int
  CompanyId Int
  Size String
  Material String
  Color String
  Design String
  describe String
  quantity Int
  IsRestock Boolean

  classifies Classifies @relation(fields: [ClassifyId], references: [Id])
  categories Categories @relation(fields: [CategoryId], references: [Id])
  warehouse Warehouses @relation(fields: [WarehouseId], references: [Id])
  suppliers Suppliers @relation(fields: [SupplierId], references: [Id])
  companyId Users @relation(fields: [CompanyId], references: [CompanyId])


  @@map("products")
}
// thiếu bảng khách hàng, hóa đơn, Nhập hàng 