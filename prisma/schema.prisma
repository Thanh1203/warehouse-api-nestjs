// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// run migrations để tạo lại các bảng 
// npx prisma migrate dev --name <migration-name>

// run docker docker-compose up -d

// tạo mới folder với lệnh: nest generate resource <resource-name> 
// tạo mới folder không có file test: nest generate resource <resource-name> --no-spec
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  Id Int @id @default(autoincrement())
  Name String?
  CreateAt DateTime @default(now())

  users Users[]
  warehouses Warehouses[]
  suppliers Suppliers[]
  categories Categories[]
  classifies Classifies[]
  products Products[]
  customers Customers[]
  invoicesCompany Invoices[]
  purchase_orders Purchase_Orders[]
  stockTransfers StockTransfers[]
  discountOffers DiscountOffers[]

  @@map("company")
}

enum StatusUser {
  ACTIVE
  DEACTIVE
}
model Users {
  Id Int @id @default(autoincrement())
  Name String
  Role String
  CompanyId Int
  Address String?
  Email String @unique
  Password String
  Phone String @unique
  CreateAt DateTime @default(now())
  UpdateAt DateTime @updatedAt
  hashedRT String?
  Status StatusUser @default(ACTIVE)

  company Company @relation(fields: [CompanyId], references: [Id])

  warehouses Warehouses[]
  stockTransfers StockTransfers[]
  invoices Invoices[]
  purchase_orders Purchase_Orders[]

  @@index([Phone, Email])
  @@map("users")
}

model Warehouses {
  Id Int @id @default(autoincrement())
  Name String
  Code String @unique
  Address String?
  StaffId Int
  TimeCreate DateTime @default(now())
  CompanyId Int

  categories Categories[]
  classifies Classifies[]
  transProductFrom StockTransfers[] @relation("FromWarehouse")
  transProductTo StockTransfers[] @relation("ToWarehouse")
  customers Customers[]
  invoices Invoices[]
  products Products[]

  company Company @relation(fields: [CompanyId], references: [Id])
  staff Users @relation(fields: [StaffId], references: [Id])

  @@map("warehouses")
}

model Suppliers {
  Id Int @id @default(autoincrement())
  Code String @unique
  Name String
  Origin String
  CreateAt DateTime @default(now())
  CompanyId Int
  IsCollab Boolean

  categories Categories[]
  classifies Classifies[]
  products Products[]
  purchase_orders Purchase_Orders[]

  company Company @relation(fields: [CompanyId], references: [Id])

  @@map("Suppliers")
}

model Categories {
  Id Int @id @default(autoincrement())
  Code String
  Name String
  CreateAt DateTime @default(now())
  WarehouseId Int
  SupplierId Int
  CompanyId Int
  IsRestock Boolean

  classifies Classifies[]
  products Products[]

  warehouses Warehouses @relation(fields: [WarehouseId], references: [Id])
  suppliers Suppliers @relation(fields: [SupplierId], references: [Id])
  company Company @relation(fields: [CompanyId], references: [Id])

  @@map("categories")
}

model Classifies {
  Id Int @id @default(autoincrement())
  Code String
  Name String
  CreateAt DateTime @default(now())
  CategoryId Int
  WarehouseId Int
  SupplierId Int
  CompanyId Int
  IsRestock Boolean

  product Products[]

  warehouse Warehouses @relation(fields: [WarehouseId], references: [Id])
  categories Categories @relation(fields: [CategoryId], references: [Id])
  suppliers Suppliers @relation(fields: [SupplierId], references: [Id])
  company Company @relation(fields: [CompanyId], references: [Id])

  @@map("classifies")  
}

enum ProductStatus {
  ACTIVE
  DEACTIVE
}

model Products {
  Id Int @id @default(autoincrement())
  Code String
  Name String
  CreateAt DateTime @default(now())
  UpdateAt DateTime @updatedAt

  CategoryId Int
  ClassifyId Int
  SupplierId Int
  CompanyId Int
  WarehouseId Int

  Size String?
  Material String?
  Color String?
  Design String?
  Describe String?
  Status ProductStatus @default(ACTIVE)
  Price Float @default(0)
  Quantity Int @default(0)

  warehouses Warehouses @relation(fields: [WarehouseId], references: [Id])
  classifies Classifies @relation(fields: [ClassifyId], references: [Id])
  categories Categories @relation(fields: [CategoryId], references: [Id])
  suppliers Suppliers @relation(fields: [SupplierId], references: [Id])
  company Company @relation(fields: [CompanyId], references: [Id])

  invoice_details Invoice_Details[]
  purchase_order_details Purchase_Order_Details[]
  purchase_return_details Purchase_Return_Details[]
  stockTransfers_details StockTransfers_Details[]

  @@map("products")
}

model Customers {
  Id Int @id @default(autoincrement())
  Name String
  Phone String
  Address String
  Email String?
  CreateAt DateTime @default(now())
  UpdateAt DateTime @updatedAt
  total_spent Float @default(0)
  purchase_count Int @default(0)
  CompanyId Int
  WarehouseId Int
  DiscountIds Int[] @default([])

  invoices Invoices[]
  customerDiscounts CustomerDiscounts[]
  discounts DiscountOffers[]

  company Company @relation(fields: [CompanyId], references: [Id])
  warehouse Warehouses @relation(fields: [WarehouseId], references: [Id])

  @@map("customers")
}

model Invoices {
  Id Int @id @default(autoincrement())
  Code String @unique
  CustomerId Int
  StaffId Int
  CreateAt DateTime @default(now())
  Total Float @default(0)
  WarehouseId Int
  Discount Float @default(0)
  CompanyId Int

  customers Customers @relation(fields: [CustomerId], references: [Id])
  warehouse Warehouses @relation(fields: [WarehouseId], references: [Id])
  company Company @relation(fields: [CompanyId], references: [Id])
  staff Users @relation(fields: [StaffId], references: [Id])

  invoice_details Invoice_Details[]

  @@map("invoices")
}

model Invoice_Details {
  Id Int @id @default(autoincrement())
  InvoiceId Int
  ProductId Int
  Quantity Int
  Price Float
  Total Float
  CreateAt DateTime @default(now())

  invoices Invoices @relation(fields: [InvoiceId], references: [Id])
  product Products @relation(fields: [ProductId], references: [Id])

  @@map("invoice_details")
}

enum PurchaseOrderStatus {
  PENDING // đang nháp
  RECEIVED // đã nhận
  RECEIVING // đang nhận hàng
  SENT // đã gửi đơn đặt hàng
  SENDING // đang gửi hàng
  RECEIVED_PART // đã nhận một phần hàng
  CANCELLED // đã hủy
}

enum ProductOrderStatus {
  PENDING // đang nháp
  RECEIVED// đã nhận
  RECEIVING // đang nhận hàng
  SENT // đã gửi đơn đặt hàng
  SENDING // đang gửi hàng
  REFUND // Hoàn trả
  CANCELLED // đã hủy
}

model Purchase_Orders {
  Id Int @id @default(autoincrement())
  Code String @unique
  SupplierId Int
  StaffId Int
  Total Float @default(0)
  CreateAt DateTime @default(now())
  UpdateAt DateTime @updatedAt
  Status PurchaseOrderStatus @default(PENDING)
  CompanyId Int
  WarehouseId Int

  suppliers Suppliers @relation(fields: [SupplierId], references: [Id])
  company Company @relation(fields: [CompanyId], references: [Id])
  staff Users @relation(fields: [StaffId], references: [Id])

  purchase_order_details Purchase_Order_Details[]
  purchase_return_details Purchase_Return_Details[]

  @@map("purchase_orders")
}

model Purchase_Order_Details {
  PurchaseOrderId Int
  ProductId Int
  Quantity Int @default(0)
  Price Float @default(0)
  Total Float @default(0)
  Status ProductOrderStatus @default(PENDING)

  purchase_orders Purchase_Orders @relation(fields: [PurchaseOrderId], references: [Id])
  product Products @relation(fields: [ProductId], references: [Id])

  @@id([PurchaseOrderId, ProductId])
  @@map("purchase_order_details")
  
}

model Purchase_Return_Details {
  PurchaseOrderId Int
  ProductId Int
  Quantity Int
  Price Float @default(0)
  Total Float @default(0)
  Status ProductOrderStatus @default(REFUND)

  purchase_orders Purchase_Orders @relation(fields: [PurchaseOrderId], references: [Id])
  product Products @relation(fields: [ProductId], references: [Id])

  @@id([PurchaseOrderId, ProductId])
  @@map("purchase_return_details")
}

enum StockTransferStatus {
  PENDING // đang nháp
  RECEIVED // đã nhận
  RECEIVING // đang nhận hàng
  SENT // đã gửi hàng
  SENDING // đang gửi hàng
  CANCELLED // đã hủy
}

model StockTransfers {
  Id Int @id @default(autoincrement())
  Code String @unique
  StaffId Int
  Quantity Int @default(0)
  FromWarehouseId Int
  ToWarehouseId Int
  CreateAt DateTime @default(now())
  UpdateAt DateTime @updatedAt
  Status StockTransferStatus @default(PENDING)
  CompanyId Int

  staff Users @relation(fields: [StaffId], references: [Id])
  fromWarehouse  Warehouses @relation("FromWarehouse", fields: [FromWarehouseId], references: [Id])
  toWarehouse    Warehouses @relation("ToWarehouse", fields: [ToWarehouseId], references: [Id])
  company Company @relation(fields: [CompanyId], references: [Id])
  
  StockTransfers_details StockTransfers_Details[]

  @@map("stockTransfers")
}

model StockTransfers_Details {
  TransProductId Int
  ProductId Int
  Quantity Int @default(0)
  Status StockTransferStatus @default(PENDING)

  StockTransfers StockTransfers @relation(fields: [TransProductId], references: [Id])
  product Products @relation(fields: [ProductId], references: [Id])

  @@id([TransProductId, ProductId])
  @@map("stockTransfers_details")
}

enum DiscountType {
  ITEMPRICE
  SHIPPING
  ITEM_SHIPPING
}

model DiscountOffers {
  Id Int @id @default(autoincrement())
  Code String @unique
  Name String
  Description String
  Discount Float @default(0)
  StartDate DateTime
  EndDate DateTime
  CreateAt DateTime @default(now())
  UpdateAt DateTime @updatedAt
  CompanyId Int
  Type DiscountType

  discountCustomers CustomerDiscounts[]
  customers Customers[]
  company Company @relation(fields: [CompanyId], references: [Id])

  @@map("discountOffers")
}
model CustomerDiscounts {
  CustomerId Int
  DiscountId Int

  customers Customers @relation(fields: [CustomerId], references: [Id])
  discount DiscountOffers @relation(fields: [DiscountId], references: [Id])

  @@id([CustomerId, DiscountId])
  @@map("customer_discounts")
}